import tkinter as tk
import math as m

class PygubuLayoutApp:
    def __init__(self, master=None):
        # build ui
        self.frame_main = tk.Tk() if master is None else tk.Toplevel(master)
        self.frame1 = tk.Frame(self.frame_main)
        self.input_frame = tk.LabelFrame(self.frame1)
        self.input_row1 = tk.Frame(self.input_frame)
        self.label_Uinf = tk.Label(self.input_row1)
        self.label_Uinf.configure(anchor='e', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_Uinf.configure(text='U_inf  =  ', width='10')
        self.label_Uinf.pack(side='left')
        self.entry_Uinf = tk.Entry(self.input_row1)
        self.input_Uinf = tk.DoubleVar(value=1.0)
        self.entry_Uinf.configure(font='{DejaVu Sans Mono} 12 {}', textvariable=self.input_Uinf, width='15')
        _text_ = '''1.0'''
        self.entry_Uinf.delete('0', 'end')
        self.entry_Uinf.insert('0', _text_)
        self.entry_Uinf.pack(pady='2', side='left')
        self.label_Uinf_unit = tk.Label(self.input_row1)
        self.label_Uinf_unit.configure(anchor='w', background='#000041', borderwidth='0', font='{Arial} 12 {}')
        self.label_Uinf_unit.configure(foreground='#d9d9d9', text='[m/s]', width='8')
        self.label_Uinf_unit.pack(padx='10', side='right')
        self.input_row1.configure(background='#000041', height='200', padx='20', width='300')
        self.input_row1.pack(side='top')
        self.input_row2 = tk.Frame(self.input_frame)
        self.label_rho = tk.Label(self.input_row2)
        self.label_rho.configure(anchor='e', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_rho.configure(text='rho_inf  =  ', width='10')
        self.label_rho.pack(side='left')
        self.entry_rho = tk.Entry(self.input_row2)
        self.input_rho = tk.DoubleVar(value=1.205)
        self.entry_rho.configure(font='{DejaVu Sans Mono} 12 {}', textvariable=self.input_rho, width='15')
        _text_ = '''1.205'''
        self.entry_rho.delete('0', 'end')
        self.entry_rho.insert('0', _text_)
        self.entry_rho.pack(pady='2', side='left')
        self.label_rho_unit = tk.Label(self.input_row2)
        self.label_rho_unit.configure(anchor='w', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_rho_unit.configure(text='[kg/m3]', width='8')
        self.label_rho_unit.pack(padx='10', side='right')
        self.input_row2.configure(background='#000041', height='200', padx='20', width='300')
        self.input_row2.pack(side='top')
        self.input_row3 = tk.Frame(self.input_frame)
        self.label_mu = tk.Label(self.input_row3)
        self.label_mu.configure(anchor='e', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_mu.configure(text='mu_inf  =  ', width='10')
        self.label_mu.pack(side='left')
        self.entry_mu = tk.Entry(self.input_row3)
        self.input_mu = tk.DoubleVar(value=1.82e-5)
        self.entry_mu.configure(font='{DejaVu Sans Mono} 12 {}', textvariable=self.input_mu, width='15')
        _text_ = '''1.82e-5'''
        self.entry_mu.delete('0', 'end')
        self.entry_mu.insert('0', _text_)
        self.entry_mu.pack(pady='2', side='left')
        self.label_mu_unit = tk.Label(self.input_row3)
        self.label_mu_unit.configure(anchor='w', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_mu_unit.configure(text='[kg/ms]', width='8')
        self.label_mu_unit.pack(padx='10', side='right')
        self.input_row3.configure(background='#000041', height='200', padx='20', width='300')
        self.input_row3.pack(side='top')
        self.input_row4 = tk.Frame(self.input_frame)
        self.label_Lturb = tk.Label(self.input_row4)
        self.label_Lturb.configure(anchor='e', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_Lturb.configure(text='L_turb  =  ', width='10')
        self.label_Lturb.pack(side='left')
        self.entry_Lturb = tk.Entry(self.input_row4)
        self.input_L = tk.DoubleVar(value=1.0)
        self.entry_Lturb.configure(font='{DejaVu Sans Mono} 12 {}', textvariable=self.input_L, width='15')
        _text_ = '''1.0'''
        self.entry_Lturb.delete('0', 'end')
        self.entry_Lturb.insert('0', _text_)
        self.entry_Lturb.pack(pady='2', side='left')
        self.label_Lturb_unit = tk.Label(self.input_row4)
        self.label_Lturb_unit.configure(anchor='w', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_Lturb_unit.configure(text='[m]', width='8')
        self.label_Lturb_unit.pack(padx='10', side='right')
        self.input_row4.configure(background='#000041', height='200', padx='20', width='300')
        self.input_row4.pack(side='top')
        self.input_row5 = tk.Frame(self.input_frame)
        self.label_yplus = tk.Label(self.input_row5)
        self.label_yplus.configure(anchor='e', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_yplus.configure(text='Y+  =  ', width='10')
        self.label_yplus.pack(side='left')
        self.entry_yplus = tk.Entry(self.input_row5)
        self.input_yplus = tk.DoubleVar(value=1.0)
        self.entry_yplus.configure(font='{DejaVu Sans Mono} 12 {}', textvariable=self.input_yplus, width='15')
        _text_ = '''1.0'''
        self.entry_yplus.delete('0', 'end')
        self.entry_yplus.insert('0', _text_)
        self.entry_yplus.pack(pady='2', side='left')
        self.label_yplus_unit = tk.Label(self.input_row5)
        self.label_yplus_unit.configure(anchor='w', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_yplus_unit.configure(text='[-]', width='8')
        self.label_yplus_unit.pack(padx='10', side='right')
        self.input_row5.configure(background='#000041', height='200', padx='20', width='300')
        self.input_row5.pack(side='top')
        self.input_frame.configure(background='#000041', font='{Arial} 14 {bold}', foreground='#d9d9d9', height='400')
        self.input_frame.configure(padx='5', pady='5', relief='ridge', text='INPUT')
        self.input_frame.configure(width='350')
        self.input_frame.grid(column='0', row='0')
        self.output_frame = tk.LabelFrame(self.frame1)
        self.output_row1 = tk.Frame(self.output_frame)
        self.label_Re = tk.Label(self.output_row1)
        self.label_Re.configure(anchor='e', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_Re.configure(text='Re  =  ', width='10')
        self.label_Re.pack(side='left')
        self.entry_Re = tk.Entry(self.output_row1)
        self.output_Re = tk.DoubleVar(value=0)
        self.entry_Re.configure(font='{DejaVu Sans Mono} 12 {}', textvariable=self.output_Re, width='15')
        _text_ = ''' '''
        self.entry_Re.delete('0', 'end')
        self.entry_Re.insert('0', _text_)
        self.entry_Re.pack(pady='2', side='left')
        self.label_Re_unit = tk.Label(self.output_row1)
        self.label_Re_unit.configure(anchor='w', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_Re_unit.configure(text='[-]', width='8')
        self.label_Re_unit.pack(padx='10', side='right')
        self.output_row1.configure(background='#000041', height='200', padx='20', width='300')
        self.output_row1.pack(side='top')
        self.output_row2 = tk.Frame(self.output_frame)
        self.label_y = tk.Label(self.output_row2)
        self.label_y.configure(anchor='e', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_y.configure(text='y  =  ', width='10')
        self.label_y.pack(side='left')
        self.entry_y = tk.Entry(self.output_row2)
        self.output_y = tk.DoubleVar(value=0)
        self.entry_y.configure(font='{DejaVu Sans Mono} 12 {}', textvariable=self.output_y, width='15')
        _text_ = ''' '''
        self.entry_y.delete('0', 'end')
        self.entry_y.insert('0', _text_)
        self.entry_y.pack(padx='2', side='left')
        self.label_y_unit = tk.Label(self.output_row2)
        self.label_y_unit.configure(anchor='w', background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9')
        self.label_y_unit.configure(text='[m]', width='8')
        self.label_y_unit.pack(padx='10', side='right')
        self.output_row2.configure(background='#000041', height='200', padx='20', width='300')
        self.output_row2.pack(side='top')
        self.output_frame.configure(background='#000041', font='{Arial} 14 {bold}', foreground='#d9d9d9', height='200')
        self.output_frame.configure(relief='ridge', text='OUTPUT', width='350')
        self.output_frame.grid(column='0', row='1')
        self.button_frame = tk.Frame(self.frame1)
        self.button_calculate = tk.Button(self.button_frame)
        self.button_calculate.configure(background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9', text='Calculate')
        self.button_calculate.configure(width='15')
        self.button_calculate.pack(pady='10', side='right')
        self.button_calculate.configure(command=self.calculate)
        self.button_quit = tk.Button(self.button_frame)
        self.button_quit.configure(background='#000041', font='{Arial} 12 {}', foreground='#d9d9d9', text='Quit')
        self.button_quit.configure(width='15')
        self.button_quit.pack(pady='10', side='left')
        self.button_quit.configure(command=self.quit)
        self.button_frame.configure(background='#000041', height='200', width='200')
        self.button_frame.grid(column='0', row='3')
        self.frame1.configure(background='#000041', height='600', width='400')
        self.frame1.pack(side='top')
        self.frame_main.configure(height='200', width='200')
        self.frame_main.title('Y+ Estimation')

        # Main widget
        self.mainwindow = self.frame_main
    
    def calculate(self):
        u_inf = float(self.input_Uinf.get())
        rho_inf = float(self.input_rho.get())
        mu_inf = float(self.input_mu.get())
        L = float(self.input_L.get())
        yPlus = float(self.input_yplus.get())

        Re_L = rho_inf * u_inf * L / mu_inf
        C_f = (2 * m.log(Re_L) - 0.65)**(-2.3)
        tau_w = C_f * rho_inf * u_inf * u_inf
        u_star = m.sqrt(tau_w / rho_inf)
        y = yPlus * mu_inf / (rho_inf * u_star)

        self.output_Re.set('{:.03e}'.format(Re_L))
        self.output_y.set('{:.03e}'.format(y))

    def quit(self):
        pass

    def run(self):
        self.mainwindow.mainloop()


if __name__ == '__main__':
    app = PygubuLayoutApp()
    app.run()

